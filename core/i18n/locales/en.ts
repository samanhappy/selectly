import type { I18nConfig } from '../types';

export const en: I18nConfig = {
  common: {
    save: 'Save',
    cancel: 'Cancel',
    confirm: 'Confirm',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    close: 'Close',
    test: 'Test',
    loading: 'Loading...',
    success: 'Success',
    error: 'Error',
    enabled: 'Enabled',
    disabled: 'Disabled',
    copy: 'Copy',
  },

  extension: {
    name: 'Selectly',
    description: 'Empower your interaction with the web',
  },

  popup: {
    title: 'Selectly Settings',
    tabs: {
      general: 'General',
      llm: 'LLM',
      functions: 'Functions',
      subscription: 'Subscription',
    },
    llm: {
      title: 'Language Model Configuration',
      baseURL: 'Base URL',
      apiKey: 'API Key',
      model: 'Model',
      testConnection: 'Test Connection',
      connectionSuccess: 'Connection successful!',
      connectionError: 'Connection failed!',
      testingConnection: 'Testing connection...',
    },
    providers: {
      title: 'Providers',
      addCustom: 'Add Custom Provider',
      addCustomProvider: 'Add Custom Provider',
      builtIn: 'Built-in',
      test: 'Test',
      testSuccess: 'Provider connected successfully',
      testError: 'Connection failed. Please check your API key and settings.',
      apiKeyPlaceholder: 'Enter your API key...',
      providerIdPlaceholder: 'e.g., my-provider',
      providerNamePlaceholder: 'e.g., My Custom Provider',
      baseURLPlaceholder: 'https://api.example.com/v1',
      add: 'Add Provider',
      edit: 'Edit Provider',
      cancel: 'Cancel',
      providerId: 'Provider ID',
      providerName: 'Provider Name',
      providerApiKey: 'API Key',
      // Form placeholders
      enterApiKey: 'Enter API key',
      enterProviderName: 'Enter provider name',
      // Help text
      providerIdHelp:
        'Used to uniquely identify this provider, can only contain letters, numbers, underscores and hyphens',
      builtInNameReadonly: 'Built-in provider names cannot be modified',
      // Error messages
      providerIdRequired: 'Please enter provider ID',
      providerIdExists: 'This ID already exists, please use a different ID',
      providerIdInvalid: 'ID can only contain letters, numbers, underscores and hyphens',
      providerNameRequired: 'Please enter provider name',
      baseURLRequired: 'Please enter API base URL',
      baseURLInvalid: 'API URL must start with http:// or https://',
      apiKeyRequired: 'Please enter API key',
      // Success messages
      testSuccessCanAdd: 'Connection test successful! You can add this provider.',
      testSuccessWillEnable: 'Connection test successful! Provider will be enabled automatically.',
      // Error messages
      testFailedCheckConfig:
        'Connection test failed, please check if the configuration is correct.',
      testFailedCheckApiKey:
        'Connection test failed, please check if API key and base URL are correct.',
      // Other
      noProviders: 'No providers',
      addCustomHint: 'Click the button above to add custom providers',
      getApiKey: 'Get API Key',
      deleteProvider: 'Delete Provider',
      save: 'Save',
      testConnection: 'Test Connection',
      testing: 'Testing',
      willAutoTestOnSave: 'API key will be automatically tested when saving',
    },
    models: {
      title: 'Model Selection',
      defaultModelTitle: 'Model',
      defaultModelDescription:
        "This model will be used when functions have 'default' selected as their model.",
      defaultModel: 'Default Model',
      default: 'Default',
      loading: 'Loading models...',
      contextWindow: 'Context Window',
      noProvidersEnabled:
        'No providers are enabled. Please configure and test your providers first.',
      noProvidersWarning: 'Please enable at least one provider to select a default model.',
      // Enhanced model selector
      searchModels: 'Search models...',
      allProviders: 'All Providers',
      loadingModels: 'Loading model list...',
      noMatchingModels: 'No matching models found',
      noAvailableModels: 'No available models',
      enableProvidersFirst: 'Please enable at least one provider first',
      close: 'Close',
      context: 'Context',
    },
    functions: {
      title: 'Functions',
      appearance: 'Appearance',
      addCustom: 'Add Custom Function',
      editFunction: 'Edit Function',
      functionKey: 'Function Key',
      description: 'Description',
      prompt: 'Prompt',
      icon: 'Icon',
      model: 'Model',
      enabled: 'Enabled',
      premiumRequired: 'Premium Required',
      upgradeToUnlock: 'Upgrade to Premium to unlock this feature',
      placeholders: {
        functionKey: 'e.g.: translate, summarize',
        description: 'e.g.: Translate selected text',
        prompt: 'Please translate the following text: {text}',
        displayDomains: 'e.g.: example.com, docs.example.com',
        autoExecuteDomains: 'e.g.: example.com',
      },
      labels: {
        title: 'Name',
        icon: 'Icon',
        aiModel: 'Model',
        promptTemplate: 'Prompt',
        promptHelp: 'Use {text} to represent selected text',
        configuration: 'Configuration',
        basicSettings: 'Basic Settings',
        advancedSettings: 'Advanced Settings',
        autoExecute: 'Auto Execute',
        autoExecuteHelp: 'Run this function automatically when text is selected',
        autoCloseButtons: 'Auto Close Buttons',
        autoCloseButtonsHelp: 'Close action buttons automatically after execution',
        autoCloseResult: 'Auto Close Result',
        autoCloseResultHelp: 'Close the result window automatically after clicking outside',
        collapsed: 'Collapse',
        collapsedHelp: 'Hide this function under the â‹¯ menu in the toolbar',
        displayDomains: 'Display Domains',
        displayDomainsHelp:
          'Comma-separated hostnames. Leave empty for all sites. Supports subdomains (e.g., docs.example.com)',
        autoExecuteDomains: 'Auto-Execute Domains',
        autoExecuteDomainsHelp:
          'Restrict auto-execute to these domains (same rules as Display Domains)',
        isPremium: 'Premium Feature',
        isPremiumHelp: 'When enabled, this function requires an active premium subscription to use',
        searchEngine: 'Search Engine',
        searchEngineHelp: 'Choose which search engine to use for search queries',
      },
      editTitle: 'Edit Function',
      searchEngines: {
        google: 'Google',
        bing: 'Bing',
        baidu: 'Baidu',
      },
    },
    general: {
      title: 'Configuration',
      language: 'Language',
      theme: 'Theme',
      buttonPosition: 'Button Position',
      buttonPositionAbove: 'Above',
      buttonPositionBelow: 'Below',
    },
    subscription: {
      signIn: 'Sign In',
      signOut: 'Sign Out',
      title: 'Premium Subscription',
      signInToAccess: 'Sign in to access premium features',
      userInfo: 'User',
      loading: 'Loading user info...',
      checkingStatus: 'Checking subscription status...',
      refreshStatus: 'Refresh',
      cannotVerify: 'Cannot verify subscription status',
      premiumActive: 'Premium membership activated',
      premiumActiveMonthly: 'Monthly membership activated',
      premiumActiveLifetime: 'Lifetime membership activated',
      premiumExpires: 'Expires',
      features: 'Premium features include:',
      featuresUnlimited: 'Unlimited AI operations',
      featuresAdvanced: 'Advanced text processing features',
      featuresSupport: 'Priority customer support',
      subscribe: 'Subscribe to Premium',
      monthlyPlan: 'Pro Monthly',
      monthlyPrice: '$2/month',
      monthlyPriceOriginal: '$3',
      monthlyPriceSale: 'Limited Time Offer',
      lifetimePlan: 'Pro Lifetime',
      lifetimePrice: '$19 lifetime',
      lifetimePriceOriginal: '$29',
      lifetimePriceSale: 'Limited Time Offer',
      choosePlan: 'Choose your subscription plan',
      planComparison: 'Both plans include the same premium features',
      subscribeMonthly: 'Subscribe Monthly',
      subscribeLifetime: 'Buy Lifetime',
      owned: 'Owned',
      expiresOn: 'Expires on',
      description:
        'Subscribe to premium features to get more powerful AI processing capabilities and priority support.',
      paymentSecure:
        'Payment is processed through secure Stripe platform. You can cancel your subscription at any time.',
      cancelAnytime: 'You can cancel your subscription at any time.',
      lifetimeOneTime: 'One-time payment, lifetime access',
      loginRequired: 'Please log in first to get user information',
      paymentError: 'Payment system configuration error, please contact administrator',
      subscriptionError: 'An error occurred during subscription, please try again',
      redeemEntry: 'Redeem Code',
      redeemTitle: 'Redeem Membership Code',
      redeemDesc: 'Enter your redeem code to activate premium membership',
      redeemPlaceholder: 'Enter redeem code',
      redeemSubmit: 'Redeem',
      redeemSuccess: 'Redeemed successfully',
      redeemFailed: 'Redeem failed',
      redeemError: 'Redeem error, please try again',
      redeemLifetime: 'Lifetime membership activated',
    },
  },

  content: {
    processing: 'Processing...',
    complete: 'Complete',
    error: 'Processing failed',
    noTextSelected: 'No text selected',
    dialoguePlaceholder: 'Type your message...',
    selectedText: 'Selected Text',
    chatWelcome: 'Ask me anything about the selected text...',
    pin: 'Pin',
    unpin: 'Unpin',
    addToDictionary: 'Add to Dictionary',
  },

  button: {
    export: 'Export',
    clear: 'Clear',
  },

  options: {
    title: 'Selectly Options',
    contentCenter: 'Content Center',
    toggleSidebar: 'Toggle sidebar',
    sidebar: {
      collections: 'Collection',
      dictionary: 'Dictionary',
    },
    collections: {
      title: 'Collection',
      collectionGroups: 'Collection',
      search: 'Search',
      searchPlaceholder: 'Search',
      clearAll: 'Clear All',
      clearAllConfirm: 'Clear all collections?',
      loading: 'Loading...',
      noCollections:
        'No collections yet. Select text on any page and click the collect button to save.',
      noCollectionsDescription:
        'No collections yet. Select text on any page and click the collect button to save.',
      copy: 'Copy',
      delete: 'Delete',
      visitPage: 'Visit page',
    },
    dictionary: {
      title: 'Dictionary',
      csvHeaderText: 'Text',
      csvHeaderTranslation: 'Translation',
      csvHeaderSentence: 'Sentence',
      csvHeaderURL: 'URL',
      csvHeaderTitle: 'Title',
      csvHeaderHostname: 'Hostname',
      csvHeaderCreatedAt: 'Created At',
    },
    general: {
      dataManagement: 'Data Management',
      exportConfig: 'Export Configuration',
      exportConfigDesc: 'Download all settings and data as JSON file',
      export: 'Export',
      exportSuccess: 'Configuration exported successfully!',
      exportError: 'Failed to export configuration. Please try again.',
      importConfig: 'Import Configuration',
      importConfigDesc: 'Restore settings and data from JSON file',
      import: 'Import',
      importSuccess: 'Configuration imported successfully! The page will reload.',
      importError: 'Failed to import configuration',
    },
  },

  collections: {
    collected: 'Collected',
    savedToCollections: 'Saved to Collection',
  },

  errors: {
    systemError: 'System Error',
    cannotShowResultWindow: 'Cannot show result window',
    copyFailed: 'Copy Failed',
    cannotAccessClipboard: 'Cannot access clipboard',
    llmNotConfigured: 'LLM Service Not Configured',
    pleaseConfigureApiKey: 'Please configure API Key in settings before using AI features',
    configError: 'Configuration Error',
    missingPromptConfig: 'Function missing prompt configuration',
    failed: 'Failed',
    unknownError: 'Unknown error',
    invalidApiKey: 'Invalid API key, please check settings',
    rateLimitExceeded: 'API rate limit exceeded, please try again later',
    serverError: 'Server error, please try again later',
    networkError: 'Network connection error, please check network settings',
    llmServiceError: 'LLM Service Error',
    llmDefaultServiceError:
      'Default model service is temporarily unavailable, please add another provider or try again later',
    llmStreamingServiceError: 'LLM Streaming Service Error',
    premiumRequired: 'Premium Feature',
    pleaseSubscribe: 'Subscription to premium is required to use this feature',
    dailyLimitExceeded: 'Daily Limit Exceeded',
    dailyLimitMessage:
      "You've reached your daily limit for premium actions. Upgrade to premium for unlimited access.",
  },

  success: {
    copySuccess: 'Copy Success',
    textCopiedToClipboard: 'Text copied to clipboard',
  },

  time: {
    month: 'month',
    months: 'months',
    year: 'year',
    years: 'years',
  },

  contextMenu: {
    translateText: 'Translate "%s"',
  },

  defaultFunctions: {
    translate: {
      title: 'Translate',
      description: 'Translate selected text',
      prompt:
        'You are a professional translator. Please translate the following text to {targetLanguage}. If the text is already in {targetLanguage}, translate it to English instead. Maintain the original tone and meaning. Return only the translation without any explanation or additional text:\n\n{text}',
    },
    polish: {
      title: 'Polish',
      description: 'Polish selected text',
      prompt:
        'Please polish and improve the following text to make it more fluent, accurate and professional. Keep the original meaning and language unchanged, return only the polished result:\n\n{text}',
    },
    explain: {
      title: 'Explain',
      description: 'Explain selected text',
      prompt:
        'Please explain the following text clearly and concisely in {targetLanguage}. Focus on the key meaning and essential context. Keep your explanation brief and easy to understand:\n\n{text}',
    },
    correct: {
      title: 'Correct',
      description: 'Correct selected text',
      prompt:
        'Please check and correct grammar, spelling and expression errors in the following text, return the corrected text:\n\n{text}',
    },
    copy: {
      title: 'Copy',
      description: 'Copy selected text',
      prompt: '{text}',
    },
    search: {
      title: 'Search',
      description: 'Search selected text',
      prompt: '{text}',
    },
    open: {
      title: 'Open',
      description: 'Open selected URL',
      prompt: '{text}',
    },
    collect: {
      title: 'Collect',
      description: 'Save selected text to collections',
      prompt: '{text}',
    },
    chat: {
      title: 'Chat',
      description: 'Chat with AI',
      prompt:
        'You are a helpful AI assistant. Please respond to user messages in a conversational manner. The user has selected this text: "{text}".',
    },
    share: {
      title: 'Share',
      description: 'Generate share image',
      prompt: '{text}',
    },
  },
};
